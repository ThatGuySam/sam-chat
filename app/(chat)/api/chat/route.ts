import {
  LanguageModelV1,
  type Message,
  createDataStreamResponse,
  smoothStream,
  streamText,
} from 'ai';

import { auth } from '@/app/(auth)/auth';
import { groqModel, openaiModel } from '@/lib/ai';
import { isGroqModel, models } from '@/lib/ai/models';
import { systemPrompt } from '@/lib/ai/prompts';
import {
  deleteChatById,
  getChatById,
  saveChat,
  saveMessages,
} from '@/lib/db/queries';
import {
  generateUUID,
  getMostRecentUserMessage,
  sanitizeResponseMessages,
} from '@/lib/utils';

import { generateTitleFromUserMessage } from '../../actions';
import { createDocument } from '@/lib/ai/tools/create-document';
import { updateDocument } from '@/lib/ai/tools/update-document';
import { requestSuggestions } from '@/lib/ai/tools/request-suggestions';
import { getWeather } from '@/lib/ai/tools/get-weather';

export const maxDuration = 60;

type AllowedTools =
  | 'createDocument'
  | 'updateDocument'
  | 'requestSuggestions'
  | 'getWeather';

const blocksTools: AllowedTools[] = [
  'createDocument',
  'updateDocument',
  'requestSuggestions',
];

const weatherTools: AllowedTools[] = ['getWeather'];
const allTools: AllowedTools[] = [...blocksTools, ...weatherTools];

/**
 * POST handler for the chat API. This endpoint:
 * - Validates the session and user authentication.
 * - Checks the provided model identifier and user message.
 * - Creates a new chat if it does not exist.
 * - Saves the user message.
 * - Streams the response generated by the AI.
 *
 * The update adds support for Groq open source models. When the model is Groq, the
 * client must provide a "groqVariant" field to select a specific Groq model variant.
 * If missing or unsupported, an error is returned.
 */
export async function POST(request: Request) {
  // Parse the JSON body. Added groqVariant for Groq open source models.
  const {
    id,
    messages,
    modelId,
  }: {
    id: string;
    messages: Array<Message>;
    modelId: string;
  } = await request.json();

  // Validate user authentication.
  const session = await auth();

  if (!session || !session.user || !session.user.id) {
    return new Response('Unauthorized', { status: 401 });
  }

  // Retrieve the correct model configuration.
  const model = models.find((m) => m.id === modelId);
  if (!model) {
    return new Response('Model not found', { status: 404 });
  }

  // Extract the most recent user message.
  const userMessage = getMostRecentUserMessage(messages);
  if (!userMessage) {
    return new Response('No user message found', { status: 400 });
  }

  // Check or create the chat record.
  const chat = await getChatById({ id });
  if (!chat) {
    const title = await generateTitleFromUserMessage({ message: userMessage });
    await saveChat({ id, userId: session.user.id, title });
  }

  // Save the incoming user message.
  await saveMessages({
    messages: [{
      ...userMessage,
      createdAt: new Date(),
      chatId: id,
    }],
  });

  // Choose the correct model instance based on the provider.
  let modelInstance: LanguageModelV1 | undefined;
  if ( isGroqModel(model) ) {
    try {
      // Create a Groq model instance from the helper.
      modelInstance = groqModel( model.apiIdentifier );
    } catch (error) {
      return new Response(
        'Unsupported Groq model variant',
        { status: 400 }
      );
    }
  } else {
    // For non-Groq models, use the openai model.
    modelInstance = openaiModel(model.apiIdentifier);
  }

  // Create a streaming response using the selected model instance.
  return createDataStreamResponse({
    execute: (dataStream) => {
      const result = streamText({
        model: modelInstance,
        system: systemPrompt,
        messages,
        maxSteps: 5,
        experimental_activeTools: allTools,
        experimental_transform: smoothStream({ chunking: 'word' }),
        experimental_generateMessageId: generateUUID,
        tools: {
          // Tool integration for real-time actions.
          getWeather,
          createDocument: createDocument({ session, dataStream, model }),
          updateDocument: updateDocument({ session, dataStream, model }),
          requestSuggestions: requestSuggestions({ session, dataStream, model }),
        },
        onFinish: async ({ response }) => {
          if (session.user?.id) {
            try {
              const safeResponseMessages =
                sanitizeResponseMessages(response.messages);
              await saveMessages({
                messages: safeResponseMessages.map((message) => ({
                  id: message.id,
                  chatId: id,
                  role: message.role,
                  content: message.content,
                  createdAt: new Date(),
                })),
              });
            } catch (error) {
              console.error('Failed to save chat');
            }
          }
        },
        experimental_telemetry: {
          isEnabled: true,
          functionId: 'stream-text',
        },
      });

      // Merge the AI's streaming result into the HTTP data stream.
      result.mergeIntoDataStream(dataStream);
    },
  });
}

/**
 * DELETE handler for the chat API.
 * This endpoint allows authenticated users to delete a chat
 * if they own it.
 */
export async function DELETE(request: Request) {
  const { searchParams } = new URL(request.url);
  const id = searchParams.get('id');

  if (!id) {
    return new Response('Not Found', { status: 404 });
  }

  const session = await auth();

  if (!session || !session.user) {
    return new Response('Unauthorized', { status: 401 });
  }

  try {
    const chat = await getChatById({ id });

    if (chat.userId !== session.user.id) {
      return new Response('Unauthorized', { status: 401 });
    }

    await deleteChatById({ id });

    return new Response('Chat deleted', { status: 200 });
  } catch (error) {
    return new Response('An error occurred while processing your request', {
      status: 500,
    });
  }
}
